AWSTemplateFormatVersion: "2010-09-09"
Description: code delivery for each services
Parameters:
  GitHubApplicationRepo:
    Type: String
    Description: Application code lives here
  GitHubTemplatesRepo:
      Type: String
      Description: Templates / Scripting / common infrastructure related code lives here

  GitHubBranch:
    Type: String
    Description: Branch to pull the code from

  GitHubToken:
    Type: String
    Description: Github User Token

  GitHubUser:
    Type: String
    Description: User or organization who owns the repositories

  ServiceName:
        Description: Name of the service
        Type: String

  CronExpressionDevEnvironment:
      Type: String
      Description: >
        Schedule to run the service in dev environment.Example : cron(0/2 * * * ? *)

  CronExpressionProdEnvironment:
      Type: String
      Description: >
        Schedule to run the service in prod environment.Example : cron(0/2 * * * ? *)
Resources:

    CodePipelineServiceRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        AssumeRolePolicyDocument: |
          {
              "Statement": [{
                  "Effect": "Allow",
                  "Principal": { "Service": [ "codepipeline.amazonaws.com" ]},
                  "Action": [ "sts:AssumeRole" ]
              }]
          }
        Policies:
          - PolicyName: root
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Resource:
                    - !Sub arn:aws:s3:::${AWS::AccountId}-codepipeline-artifacts/*
                  Effect: Allow
                  Action:
                    - s3:PutObject
                    - s3:GetObject
                    - s3:GetObjectVersion
                    - s3:GetBucketVersioning
                - Resource: "*"
                  Effect: Allow
                  Action:
                    - codebuild:StartBuild
                    - codebuild:BatchGetBuilds
                    - cloudformation:*
                    - lambda:*
                    - iam:PassRole
    CloudFormationExecutionRole:
      Type: AWS::IAM::Role
      DeletionPolicy: Retain
      Properties:
        Path: /
        AssumeRolePolicyDocument: |
          {
              "Statement": [{
                  "Effect": "Allow",
                  "Principal": { "Service": [ "cloudformation.amazonaws.com" ]},
                  "Action": [ "sts:AssumeRole" ]
              }]
          }
        Policies:
          - PolicyName: root
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Resource: "*"
                  Effect: Allow
                  Action:
                    - ecs:*
                    - ecr:*
                    - batch:*
                    - iam:*
                    - ecr:*
                    - lambda:*
                    - events:*
    CodeBuildServiceRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service: codebuild.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: root
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Resource: "*"
                  Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - ecr:GetAuthorizationToken
                    - batch:RegisterJobDefinition
                    - events:PutRule
                    - events:EnableRule
                    - events:PutTargets
                    - iam:PassRole
                - Resource: !Sub arn:aws:s3:::${AWS::AccountId}-codepipeline-artifacts/*
                  Effect: Allow
                  Action:
                    - s3:GetObject
                    - s3:PutObject
                    - s3:GetObjectVersion
                - Resource: !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${EcrRepository}
                  Effect: Allow
                  Action:
                    - ecr:GetDownloadUrlForLayer
                    - ecr:BatchGetImage
                    - ecr:BatchCheckLayerAvailability
                    - ecr:PutImage
                    - ecr:InitiateLayerUpload
                    - ecr:UploadLayerPart
                    - ecr:CompleteLayerUpload
    EcrRepository:
        Type: AWS::ECR::Repository
    CodeBuildProject:
      Type: AWS::CodeBuild::Project
      Properties:
        Artifacts:
          Type: CODEPIPELINE
        Source:
          Type: CODEPIPELINE
          BuildSpec: |
                    version: 0.2
                    phases:
                      pre_build:
                        commands:
                          - $(aws ecr get-login --no-include-email)
                          - TAG="$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)"
                      build:
                        commands:
                          - docker build --tag "${REPOSITORY_URI}:${TAG}" .
                      post_build:
                        commands:
                          - docker push "${REPOSITORY_URI}:${TAG}"
                          - printf '{"tag":"%s"}' ${REPOSITORY_URI}:${TAG} > build.json
                          - cat build.json
                    artifacts:
                      files: build.json
        Environment:
          ComputeType: BUILD_GENERAL1_SMALL
          Image: aws/codebuild/docker:17.09.0
          Type: LINUX_CONTAINER
          EnvironmentVariables:
            - Name: AWS_DEFAULT_REGION
              Value: !Ref AWS::Region
            - Name: REPOSITORY_URI
              Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrRepository}
        Name: !Sub ${AWS::StackName}-codebuildproject
        ServiceRole: !Ref CodeBuildServiceRole
    Pipeline:
        Type: AWS::CodePipeline::Pipeline
        Properties:
          RoleArn: !GetAtt CodePipelineServiceRole.Arn
          ArtifactStore:
            Type: S3
            Location: !Sub ${AWS::AccountId}-codepipeline-artifacts
          Stages:
            - Name: Source
              Actions:
                - Name: App
                  ActionTypeId:
                    Category: Source
                    Owner: ThirdParty
                    Version: 1
                    Provider: GitHub
                  Configuration:
                    Owner: !Ref GitHubUser
                    Repo: !Ref GitHubApplicationRepo
                    Branch: !Ref GitHubBranch
                    OAuthToken: !Ref GitHubToken
                  OutputArtifacts:
                    - Name: App
                  RunOrder: 1
                - Name: Scripts
                  ActionTypeId:
                    Category: Source
                    Owner: ThirdParty
                    Version: 1
                    Provider: GitHub
                  Configuration:
                    Owner: !Ref GitHubUser
                    Repo: !Ref GitHubTemplatesRepo
                    Branch: !Ref GitHubBranch
                    OAuthToken: !Ref GitHubToken
                  OutputArtifacts:
                    - Name: Scripts
                  RunOrder: 1
            - Name: Build
              Actions:
                - Name: Build
                  ActionTypeId:
                    Category: Build
                    Owner: AWS
                    Version: 1
                    Provider: CodeBuild
                  Configuration:
                    ProjectName: !Ref CodeBuildProject
                  InputArtifacts:
                    - Name: App
                  OutputArtifacts:
                    - Name: BuildOutput
                  RunOrder: 1
            - Name: Deploy-To-Dev
              Actions:
                - Name: Deploy
                  ActionTypeId:
                    Category: Deploy
                    Owner: AWS
                    Version: 1
                    Provider: CloudFormation
                  Configuration:
                    ChangeSetName: Deploy
                    ActionMode: CREATE_UPDATE
                    StackName: !Sub dev-${ServiceName}-execution-environment
                    Capabilities: CAPABILITY_NAMED_IAM
                    TemplatePath: Scripts::templates/03-events-per-service.yaml
                    RoleArn: !GetAtt CloudFormationExecutionRole.Arn
                    ParameterOverrides: !Sub |
                      {
                          "Environment": "dev",
                          "ServiceName": "${ServiceName}",
                          "ImageSha" : { "Fn::GetParam" : [ "BuildOutput", "build.json", "tag" ] },
                          "CronExpression" : "${CronExpressionDevEnvironment}"

                      }
                  InputArtifacts:
                    - Name: Scripts
                    - Name: BuildOutput
                  RunOrder: 1
            - Name: Deploy-To-Prod
              Actions:
                - Name: Approval
                  ActionTypeId:
                    Category: Approval
                    Owner: AWS
                    Version: 1
                    Provider: Manual
                  Configuration:
                    CustomData: "Continue with production deployment ?"
                  RunOrder: 1
                - Name: Deploy
                  ActionTypeId:
                    Category: Deploy
                    Owner: AWS
                    Version: 1
                    Provider: CloudFormation
                  Configuration:
                    ChangeSetName: Deploy
                    ActionMode: CREATE_UPDATE
                    StackName: !Sub prod-${ServiceName}-execution-environment
                    Capabilities: CAPABILITY_NAMED_IAM
                    TemplatePath: Scripts::templates/03-events-per-service.yaml
                    RoleArn: !GetAtt CloudFormationExecutionRole.Arn
                    ParameterOverrides: !Sub |
                      {
                                      "Environment": "prod",
                                      "ServiceName": "${ServiceName}",
                                      "ImageSha" : { "Fn::GetParam" : [ "BuildOutput", "build.json", "tag" ] },
                                      "CronExpression" : "${CronExpressionProdEnvironment}"

                      }
                  InputArtifacts:
                    - Name: Scripts
                    - Name: BuildOutput
                  RunOrder: 2
